<?php

/**
 * @file
 * File description.
 *
 * Long description.
 */

use Drupal\migrate_tools\MigrateBatchExecutable;
use Drupal\migrate\MigrateMessage;
use Drupal\Core\Form\FormStateInterface;
//use Drupal\stanford_localist_importer\StanfordEventsImporter;
use Drupal\Core\Cache\CacheBackendInterface;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the config form to add the migrate_tools UI.
 */
function stanford_localist_importer_form_config_pages_stanford_localist_importer_form_alter(array &$form, FormStateInterface $form_state) {
  /*
  $user = \Drupal::currentUser();
  $form['actions']['#type'] = 'fieldset';

  $form['actions']['import'] = [
    '#type' => 'submit',
    '#value' => t('Save & Import'),
    '#name' => 'op',
    '#button_type' => "primary",
    '#submit' => [
      "::submitForm",
      "::save",
      "stanford_localist_importer_form_config_pages_stanford_localist_importer_form_alter_submit",
    ],
  ];

  $form['actions']['update_opts'] = [
    '#type' => 'submit',
    '#value' => t('Update Org & Category Options'),
    '#name' => 'op',
    '#submit' => ["stanford_localist_importer_update_opts"],
    '#access' => $user->hasPermission("administer migrations"),
  ];

  return $form;
  */
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function stanford_localist_importer_config_pages_presave(EntityInterface $entity) {
  // Clear out config and migration cache to allow config overrides to take
  // effect.

  /*
  if ($entity->bundle() == 'stanford_localist_importer') {
    Cache::invalidateTags([
      'config:migrate_plus.migration.stanford_localist_importer',
      'migration_plugins',
    ]);
  }
  */
}

/**
 * Submit handler for the config form override.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function stanford_localist_importer_form_config_pages_stanford_localist_importer_form_alter_submit(array &$form, FormStateInterface $form_state) {

  /*

  // Get the migration object from the ones available.
  $migrations = stanford_migrate_migration_list();
  $migration_plugin = $migrations["stanford_events"]["stanford_localist_importer"] ?? FALSE;

  // Can't find it.
  if (!$migration_plugin) {
    \Drupal::messenger()->addError('Could not find the stanford_localist_importer migration!');
    return;
  }

  // Spin up the things we need and run em.
  $migrateMessage = new MigrateMessage();
  $options = [
    'update' => TRUE,
    'force' => TRUE,
  ];

  try {
    $executable = new MigrateBatchExecutable($migration_plugin, $migrateMessage, $options);
    $executable->batchImport();

  }
  catch (Exception $e) {
    \Drupal::messenger()->addError('Could not run importer!');
  }


  */

}

/**
 * Fetch and save to state the org & category data.
 */
function stanford_localist_importer_update_opts() {

  /*

  $client = \Drupal::httpClient();
  $importer = new StanfordEventsImporter($client);

  // Categories.
  // --------------------------------------------------------------------------.
  $cat_xml_raw = $importer->fetchXML('category-list');

  $args = [
    'guids' => '/CategoryList/Category/guid',
    'label' => '/CategoryList/Category/name',
  ];

  // Get the formatted key->value pairs.
  $key_val = $importer->parseXML($cat_xml_raw, $args);

  // Set the state storage for this site.
  \Drupal::cache()
    ->set(StanfordEventsImporter::CACHE_KEY_CAT, $key_val, CacheBackendInterface::CACHE_PERMANENT, ['stanford_localist_importer']);

  // Organizations.
  // --------------------------------------------------------------------------.
  $org_xml_raw = $importer->fetchXML('organization-list');

  $args = [
    'guids' => '/OrganizationList/Organization/guid',
    'label' => '/OrganizationList/Organization/name',
  ];

  // Get the formatted key->value pairs.
  $key_val = $importer->parseXML($org_xml_raw, $args);

  // Set the state storage for this site.
  \Drupal::cache()
    ->set(StanfordEventsImporter::CACHE_KEY_ORG, $key_val, CacheBackendInterface::CACHE_PERMANENT, ['stanford_localist_importer']);

  // Done.
  \Drupal::messenger()->addStatus('Updated category and organization information.');

  */

}
