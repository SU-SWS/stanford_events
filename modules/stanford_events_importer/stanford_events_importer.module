<?php

/**
 * @file
 * File description.
 *
 * Long description.
 */

use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate_tools\MigrateBatchExecutable;
use Drupal\migrate\MigrateMessage;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the config form to add the migrate_tools UI.
 */
function stanford_events_importer_form_config_pages_stanford_events_importer_form_alter(array &$form, FormStateInterface $form_state) {

  // Build the migration execution form.
  $options = [
    'import' => t('Import'),
    'rollback' => t('Rollback'),
    'stop' => t('Stop'),
    'reset' => t('Reset'),
  ];

  $form['operations'] = [
    '#type' => 'details',
    '#title' => t('Execution options'),
    '#open' => TRUE,
  ];

  $form['operations']['operation'] = [
    '#type' => 'radios',
    '#title' => t('Operation'),
    '#description' => t('Choose an operation to run.'),
    '#options' => $options,
    'import' => [
      '#description' => t('Imports all previously unprocessed records from the source, plus any records marked for update, into destination event items.'),
    ],
    'rollback' => [
      '#description' => t('Deletes all Event objects created by the import.'),
    ],
    'stop' => [
      '#description' => t('Cleanly interrupts any import or rollback processes that may currently be running.'),
    ],
    'reset' => [
      '#description' => t('Sometimes a process may fail to stop cleanly, and be left stuck in an Importing or Rolling Back status. Choose Reset to clear the status and permit other operations to proceed.'),
    ],
  ];

  $form['options'] = [
    '#type' => 'details',
    '#title' => t('Additional execution options'),
    '#open' => FALSE,
  ];

  $form['options']['update'] = [
    '#type' => 'checkbox',
    '#title' => t('Update'),
    '#description' => t('Check this box to update all previously-imported content in addition to importing new content. Leave unchecked to only import new content'),
  ];

  $form['options']['force'] = [
    '#type' => 'checkbox',
    '#title' => t('Ignore dependencies'),
    '#description' => t('Check this box to ignore dependencies when running imports - all tasks will run whether or not their dependent tasks have completed.'),
  ];

  $form['options']['limit'] = [
    '#type' => 'number',
    '#title' => t('Limit to:'),
    '#size' => 10,
    '#description' => t('Set a limit of how many items to process for each migration task.'),
  ];

  // Add our submit handler.
  $form['actions']['submit']['#submit'][] = "stanford_events_importer_form_config_pages_stanford_events_importer_form_alter_submit";

  return $form;
}

/**
 * Submit handler for the config form override.
 */
function stanford_events_importer_form_config_pages_stanford_events_importer_form_alter_submit($form, &$form_state) {
  $operation = $form_state->getValue('operation');

  if ($form_state->getValue('limit')) {
    $limit = $form_state->getValue('limit');
  }
  else {
    $limit = 0;
  }

  if ($form_state->getValue('update')) {
    $update = $form_state->getValue('update');
  }
  else {
    $update = 0;
  }
  if ($form_state->getValue('force')) {
    $force = $form_state->getValue('force');
  }
  else {
    $force = 0;
  }

  // Reset all static caches as something is getting stuck.
  drupal_static_reset();

  // Clear all plugin caches.
  \Drupal::service('plugin.cache_clearer')
    ->clearCachedDefinitions();

  $migrations = stanford_migrate_migration_list();
  $migration_plugin = $migrations["stanford_events"]["stanford_events_importer"] ?? FALSE;

  if (!$migration_plugin) {
    \Drupal::messenger()->addError('Could not find the stanford_events_importer migration!');
  }

  $migrateMessage = new MigrateMessage();
  switch ($operation) {
    case 'import':
      $options = [
        'limit' => $limit,
        'update' => $update,
        'force' => $force,
      ];
      $executable = new MigrateBatchExecutable($migration_plugin, $migrateMessage, $options);
      $executable->batchImport();
      break;

    case 'rollback':
      $options = [
        'limit' => $limit,
        'update' => $update,
        'force' => $force,
      ];
      $executable = new MigrateBatchExecutable($migration_plugin, $migrateMessage, $options);
      $executable->rollback();
      break;

    case 'stop':
      $migration_plugin->interruptMigration(MigrationInterface::RESULT_STOPPED);
      break;

    case 'reset':
      $migration_plugin->setStatus(MigrationInterface::STATUS_IDLE);
      break;
  }
}
