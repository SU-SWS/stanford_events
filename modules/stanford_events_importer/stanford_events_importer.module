<?php

/**
 * @file
 * File description.
 *
 * Long description.
 */

use Drupal\migrate_tools\MigrateBatchExecutable;
use Drupal\migrate\MigrateMessage;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\User;

/**
 * URL Endpoint for getting categories.
 */
const STANFORD_EVENTS_IMPORTER_XML = "https://events.stanford.edu/xml/drupal/v2.php";

/**
 * Key used to get/set state for organization information.
 */
const STANFORD_EVENTS_IMPORTER_STATE_KEY_ORG = "stanford_events_importer_orgs";

/**
 * Key used to get/set state for category information.
 */
const STANFORD_EVENTS_IMPORTER_STATE_KEY_CAT = "stanford_events_importer_cats";

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the config form to add the migrate_tools UI.
 */
function stanford_events_importer_form_config_pages_stanford_events_importer_form_alter(array &$form, FormStateInterface $form_state) {
  $user = User::load(\Drupal::currentUser()->id());
  $form['actions']['#type'] = 'fieldset';

  $form['actions']['import'] = [
    '#type' => 'submit',
    '#value' => t('Save & Import'),
    '#name' => 'op',
    '#button_type' => "primary",
    '#submit' => [
      "::submitForm",
      "::save",
      "stanford_events_importer_form_config_pages_stanford_events_importer_form_alter_submit",
    ]
  ];

  $form['actions']['update_opts'] = [
    '#type' => 'submit',
    '#value' => t('Update Org & Category Options'),
    '#name' => 'op',
    '#submit' => [ "stanford_events_importer_update_opts" ],
    '#access' => $user->hasPermission("administer migrations"),
  ];

  return $form;
}

/**
 * Submit handler for the config form override.
 *
 * @param $form
 * @param $form_state
 */
function stanford_events_importer_form_config_pages_stanford_events_importer_form_alter_submit($form, &$form_state) {

  // Reset all static caches as something is getting stuck.
  drupal_static_reset();

  // Clear all plugin caches.
  \Drupal::service('plugin.cache_clearer')
    ->clearCachedDefinitions();

  $migrations = stanford_migrate_migration_list();
  $migration_plugin = $migrations["stanford_events"]["stanford_events_importer"] ?? FALSE;

  if (!$migration_plugin) {
    \Drupal::messenger()->addError('Could not find the stanford_events_importer migration!');
    return;
  }

  $migrateMessage = new MigrateMessage();
  $options = [
    'update' => TRUE,
    'force' => TRUE,
  ];

  try {
    $executable = new MigrateBatchExecutable($migration_plugin, $migrateMessage, $options);
    $executable->batchImport();

  }
  catch(Exception $e) {
    \Drupal::messenger()->addError('Could not run importer!');
  }

}

/**
 * Fetch and save to state the org & category data.
 */
function stanford_events_importer_update_opts() {

  $options = [
    'query' => [
      'category-list' => '',
    ],
    'headers' => [
      'Accept' => 'application/xml',
    ]
  ];

  $client = \Drupal::httpClient();
  $request = $client->get(STANFORD_EVENTS_IMPORTER_XML, $options);
  $cat_xml_raw = $request->getBody()->getContents();

  try {
    $args = [
      'guids' => '/CategoryList/Category/guid',
      'label' => '/CategoryList/Category/name',
      'state_key' => STANFORD_EVENTS_IMPORTER_STATE_KEY_CAT,
    ];
    stanford_events_importer_update_opts_parse_opts($cat_xml_raw, $args);
  }
  catch(\Exception $e) {
    \Drupal::messenger()->addError('Could not parse category information!');
  }

  $options['query'] = [ 'organization-list' => '' ];
  $request = $client->get(STANFORD_EVENTS_IMPORTER_XML, $options);
  $org_xml_raw = $request->getBody()->getContents();

  try {
    $args = [
      'guids' => '/OrganizationList/Organization/guid',
      'label' => '/OrganizationList/Organization/name',
      'state_key' => STANFORD_EVENTS_IMPORTER_STATE_KEY_ORG,
    ];
    stanford_events_importer_update_opts_parse_opts($org_xml_raw, $args);
  }
  catch(\Exception $e) {
    \Drupal::messenger()->addError('Could not parse organization information!');
  }

}

/**
 * Parses the raw xml return value from the API
 *
 * Turns the raw xml return value into a key value pair and saves
 * it into the state for the site.
 *
 * @param string $raw
 *   Raw XML string.
 * @param array $options
 *   A keyed array of options. Expects:
 *   - guids: An xpath string to the key
 *   - label: An xpath string to the label
 *   - state_key: The key in which to save the key/value pair into state.
 *
 * @return bool
 */
function stanford_events_importer_update_opts_parse_opts($raw, array $options) {
  $xml = new SimpleXMLElement($raw);
  $guids = $xml->xpath($options['guids']);
  $labels = $xml->xpath($options['label']);

  array_walk($guids, function (&$val) {
    $val = $val->__toString();
  });

  array_walk($labels, function (&$val) {
    $val = $val->__toString();
  });

  // Do nothing if nothing was found.
  if (empty($guids) || empty($labels)) {
    return FALSE;
  }

  // Create an associative array.
  $cats = array_combine($guids, $labels);

  // Set the state storage for this site.
  \Drupal::state()->set($options['state_key'], $cats);

  return TRUE;
}
